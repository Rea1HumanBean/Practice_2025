from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server import util


class UserReturnScheduleData(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name_medication=None, first_day=None, limitation_days=None, daily_schedule=None):  # noqa: E501
        """UserReturnScheduleData - a model defined in OpenAPI

        :param name_medication: The name_medication of this UserReturnScheduleData.  # noqa: E501
        :type name_medication: str
        :param first_day: The first_day of this UserReturnScheduleData.  # noqa: E501
        :type first_day: date
        :param limitation_days: The limitation_days of this UserReturnScheduleData.  # noqa: E501
        :type limitation_days: int
        :param daily_schedule: The daily_schedule of this UserReturnScheduleData.  # noqa: E501
        :type daily_schedule: List[str]
        """
        self.openapi_types = {
            'name_medication': str,
            'first_day': date,
            'limitation_days': int,
            'daily_schedule': List[str]
        }

        self.attribute_map = {
            'name_medication': 'name_medication',
            'first_day': 'first_day',
            'limitation_days': 'limitation_days',
            'daily_schedule': 'daily_schedule'
        }

        self._name_medication = name_medication
        self._first_day = first_day
        self._limitation_days = limitation_days
        self._daily_schedule = daily_schedule

    @classmethod
    def from_dict(cls, dikt) -> 'UserReturnScheduleData':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The UserReturnScheduleData of this UserReturnScheduleData.  # noqa: E501
        :rtype: UserReturnScheduleData
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name_medication(self) -> str:
        """Gets the name_medication of this UserReturnScheduleData.

        Название лекарства  # noqa: E501

        :return: The name_medication of this UserReturnScheduleData.
        :rtype: str
        """
        return self._name_medication

    @name_medication.setter
    def name_medication(self, name_medication: str):
        """Sets the name_medication of this UserReturnScheduleData.

        Название лекарства  # noqa: E501

        :param name_medication: The name_medication of this UserReturnScheduleData.
        :type name_medication: str
        """
        if name_medication is None:
            raise ValueError("Invalid value for `name_medication`, must not be `None`")  # noqa: E501

        self._name_medication = name_medication

    @property
    def first_day(self) -> date:
        """Gets the first_day of this UserReturnScheduleData.

        Название лекарства  # noqa: E501

        :return: The first_day of this UserReturnScheduleData.
        :rtype: date
        """
        return self._first_day

    @first_day.setter
    def first_day(self, first_day: date):
        """Sets the first_day of this UserReturnScheduleData.

        Название лекарства  # noqa: E501

        :param first_day: The first_day of this UserReturnScheduleData.
        :type first_day: date
        """
        if first_day is None:
            raise ValueError("Invalid value for `first_day`, must not be `None`")  # noqa: E501

        self._first_day = first_day

    @property
    def limitation_days(self) -> int:
        """Gets the limitation_days of this UserReturnScheduleData.

        Сколько дней составлять расписание  # noqa: E501

        :return: The limitation_days of this UserReturnScheduleData.
        :rtype: int
        """
        return self._limitation_days

    @limitation_days.setter
    def limitation_days(self, limitation_days: int):
        """Sets the limitation_days of this UserReturnScheduleData.

        Сколько дней составлять расписание  # noqa: E501

        :param limitation_days: The limitation_days of this UserReturnScheduleData.
        :type limitation_days: int
        """
        if limitation_days is not None and limitation_days < 1:  # noqa: E501
            raise ValueError("Invalid value for `limitation_days`, must be a value greater than or equal to `1`")  # noqa: E501

        self._limitation_days = limitation_days

    @property
    def daily_schedule(self) -> List[str]:
        """Gets the daily_schedule of this UserReturnScheduleData.

        Сколько приёмов лекарства в день  # noqa: E501

        :return: The daily_schedule of this UserReturnScheduleData.
        :rtype: List[str]
        """
        return self._daily_schedule

    @daily_schedule.setter
    def daily_schedule(self, daily_schedule: List[str]):
        """Sets the daily_schedule of this UserReturnScheduleData.

        Сколько приёмов лекарства в день  # noqa: E501

        :param daily_schedule: The daily_schedule of this UserReturnScheduleData.
        :type daily_schedule: List[str]
        """
        if daily_schedule is None:
            raise ValueError("Invalid value for `daily_schedule`, must not be `None`")  # noqa: E501

        self._daily_schedule = daily_schedule
