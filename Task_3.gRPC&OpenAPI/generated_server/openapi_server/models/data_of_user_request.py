from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server import util


class DataOfUserRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, user_id=None, name_pills=None, limitation_days=None, number_iters=None):  # noqa: E501
        """DataOfUserRequest - a model defined in OpenAPI

        :param user_id: The user_id of this DataOfUserRequest.  # noqa: E501
        :type user_id: int
        :param name_pills: The name_pills of this DataOfUserRequest.  # noqa: E501
        :type name_pills: str
        :param limitation_days: The limitation_days of this DataOfUserRequest.  # noqa: E501
        :type limitation_days: int
        :param number_iters: The number_iters of this DataOfUserRequest.  # noqa: E501
        :type number_iters: int
        """
        self.openapi_types = {
            'user_id': int,
            'name_pills': str,
            'limitation_days': int,
            'number_iters': int
        }

        self.attribute_map = {
            'user_id': 'user_id',
            'name_pills': 'name_pills',
            'limitation_days': 'limitation_days',
            'number_iters': 'number_iters'
        }

        self._user_id = user_id
        self._name_pills = name_pills
        self._limitation_days = limitation_days
        self._number_iters = number_iters

    @classmethod
    def from_dict(cls, dikt) -> 'DataOfUserRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The DataOfUserRequest of this DataOfUserRequest.  # noqa: E501
        :rtype: DataOfUserRequest
        """
        return util.deserialize_model(dikt, cls)

    @property
    def user_id(self) -> int:
        """Gets the user_id of this DataOfUserRequest.

        ID пользователя  # noqa: E501

        :return: The user_id of this DataOfUserRequest.
        :rtype: int
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id: int):
        """Sets the user_id of this DataOfUserRequest.

        ID пользователя  # noqa: E501

        :param user_id: The user_id of this DataOfUserRequest.
        :type user_id: int
        """
        if user_id is None:
            raise ValueError("Invalid value for `user_id`, must not be `None`")  # noqa: E501

        self._user_id = user_id

    @property
    def name_pills(self) -> str:
        """Gets the name_pills of this DataOfUserRequest.

        Название лекарства  # noqa: E501

        :return: The name_pills of this DataOfUserRequest.
        :rtype: str
        """
        return self._name_pills

    @name_pills.setter
    def name_pills(self, name_pills: str):
        """Sets the name_pills of this DataOfUserRequest.

        Название лекарства  # noqa: E501

        :param name_pills: The name_pills of this DataOfUserRequest.
        :type name_pills: str
        """
        if name_pills is None:
            raise ValueError("Invalid value for `name_pills`, must not be `None`")  # noqa: E501

        self._name_pills = name_pills

    @property
    def limitation_days(self) -> int:
        """Gets the limitation_days of this DataOfUserRequest.

        Сколько дней составлять расписание  # noqa: E501

        :return: The limitation_days of this DataOfUserRequest.
        :rtype: int
        """
        return self._limitation_days

    @limitation_days.setter
    def limitation_days(self, limitation_days: int):
        """Sets the limitation_days of this DataOfUserRequest.

        Сколько дней составлять расписание  # noqa: E501

        :param limitation_days: The limitation_days of this DataOfUserRequest.
        :type limitation_days: int
        """
        if limitation_days is None:
            raise ValueError("Invalid value for `limitation_days`, must not be `None`")  # noqa: E501
        if limitation_days is not None and limitation_days < 1:  # noqa: E501
            raise ValueError("Invalid value for `limitation_days`, must be a value greater than or equal to `1`")  # noqa: E501

        self._limitation_days = limitation_days

    @property
    def number_iters(self) -> int:
        """Gets the number_iters of this DataOfUserRequest.

        Сколько приёмов лекарства в день  # noqa: E501

        :return: The number_iters of this DataOfUserRequest.
        :rtype: int
        """
        return self._number_iters

    @number_iters.setter
    def number_iters(self, number_iters: int):
        """Sets the number_iters of this DataOfUserRequest.

        Сколько приёмов лекарства в день  # noqa: E501

        :param number_iters: The number_iters of this DataOfUserRequest.
        :type number_iters: int
        """
        if number_iters is None:
            raise ValueError("Invalid value for `number_iters`, must not be `None`")  # noqa: E501

        self._number_iters = number_iters
