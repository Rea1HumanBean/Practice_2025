from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server import util


class ReturnUserActualSchedule(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name_medication=None):  # noqa: E501
        """ReturnUserActualSchedule - a model defined in OpenAPI

        :param name_medication: The name_medication of this ReturnUserActualSchedule.  # noqa: E501
        :type name_medication: str
        """
        self.openapi_types = {
            'name_medication': str
        }

        self.attribute_map = {
            'name_medication': 'name_medication'
        }

        self._name_medication = name_medication

    @classmethod
    def from_dict(cls, dikt) -> 'ReturnUserActualSchedule':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The ReturnUserActualSchedule of this ReturnUserActualSchedule.  # noqa: E501
        :rtype: ReturnUserActualSchedule
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name_medication(self) -> str:
        """Gets the name_medication of this ReturnUserActualSchedule.

        Название лекарства  # noqa: E501

        :return: The name_medication of this ReturnUserActualSchedule.
        :rtype: str
        """
        return self._name_medication

    @name_medication.setter
    def name_medication(self, name_medication: str):
        """Sets the name_medication of this ReturnUserActualSchedule.

        Название лекарства  # noqa: E501

        :param name_medication: The name_medication of this ReturnUserActualSchedule.
        :type name_medication: str
        """
        if name_medication is None:
            raise ValueError("Invalid value for `name_medication`, must not be `None`")  # noqa: E501

        self._name_medication = name_medication
